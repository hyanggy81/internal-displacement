
library(dplyr)
library(readxl)
library(writexl)

# Read data
data <- read_xlsx("master_2009_2021_withoutNa4.xlsx")

# Definitions of variable types
special_vars <- c("Conflict")
regular_vars <- c( "PoliticalStability", "HDI", "GDPpc", "Urbanization", "Vulnerability", "SPEI", "AgeDependency")
growth_vars <- c("GDPgrowth", "UrbanGrowth")  
dependent_var <- c("ID")

# Transformations on special variables
data <- data %>%
  mutate(across(all_of(special_vars), ~ scale(log(. + 1))))  # log transform +1 then z-score

# Transformations on regular variables
data <- data %>%
  mutate(across(all_of(regular_vars), scale))  # direct z-score

# Transformations on dependent variables
data <- data %>%
  mutate(across(all_of(dependent_var), ~ scale(log(. + 1))))  # log transform +1 then z-score

# Combine all variables for lagging
all_vars <- c(special_vars, regular_vars, growth_vars)

# Create lagged names
lagged_vars <- paste0(all_vars, "_lag1")


data <- data %>%
  group_by(iso3) %>%
  mutate(across(all_of(all_vars), ~ c(NA, .[-length(.)]), .names = "{col}_lag1"))


input.df <- data %>%
  select(iso3, year, all_of(lagged_vars), all_of(dependent_var)) %>%
  filter(!is.na(year) & year > 2009)  


write_xlsx(input.df, "input.df.xlsx")





###### Cross-Validation
library(caret)
library(glmnet)
library(dplyr)
library(openxlsx)


input.df<-
  input.df %>% group_by(iso3) %>% 
    dplyr::mutate(L1.ID=dplyr::lag(ID,1,default=first(ID),order_by=year))

myTimeControl <- trainControl(
  method = "repeatedcv",
 number=10, p=.8, classProbs = F, allowParallel = T, savePredictions = F
)

# Elastic Net model parameter grid
alpha <- 0.5  
lambda <- seq(0, 1, 0.01)  

# formula
formula <- as.formula(paste(dependent_var, "~ .", "-year"))

# Train
elastic_model <- train(
  formula,
  data = input.df,
  method = "glmnet",
  trControl = myTimeControl,
  tuneGrid = expand.grid(alpha = alpha, lambda = lambda),
  metric = "RMSE"
)


print(elastic_model)
print(elastic_model$bestTune)
print(min(elastic_model$results$RMSE))


# Calculate R^2
rsq <- postResample(pred = predict(elastic_model, input.df), obs = input.df$ID)
rsq_stat <- rsq['Rsquared']

print(paste0("R-squared: ", rsq_stat))

elastic_model$bestTune
elastic_model$results[lambda==elastic_model$bestTune$lambda,]


# coefficients from the model at best lambda
coef_elastic <- coef(elastic_model$finalModel, s = elastic_model$bestTune$lambda)

# Convert to matrix and then to data.frame
coef_matrix <- as.matrix(coef_elastic)
coef_df <- data.frame(Coefficient = coef_matrix[, 1], Variable = rownames(coef_matrix))

# Remove the intercept and any zero coefficients
coef_df <- coef_df[coef_df$Coefficient != 0 & rownames(coef_matrix) != "(Intercept)", ]

# Display the coefficients
print(coef_df)




##Visualization
library(ggplot2)

# coefficients from the model at best lambda
coef_elastic <- coef(elastic_model$finalModel, s = elastic_model$bestTune$lambda)
coef_matrix <- as.matrix(coef_elastic)
coef_df <- data.frame(Coefficient = coef_matrix[, 1])
coef_df$Variable <- rownames(coef_matrix)


coef_df <- coef_df[coef_df$Coefficient != 0 & coef_df$Variable != "(Intercept)" & coef_df$Variable != "L1.ID", ]


coef_df <- coef_df[!startsWith(coef_df$Variable, "iso3"), ]
coef_df$Variable <- gsub("_lag1", "", coef_df$Variable)


coef_df$Variable <- gsub("GDPpc", "GDP per Capita", coef_df$Variable)
coef_df$Variable <- gsub("Vulnerability", "Climate Vulnerability", coef_df$Variable)

# Visualization
ggplot(coef_df, aes(x = reorder(Variable, Coefficient), y = Coefficient)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  coord_flip() + # Flip coordinates for horizontal layout
  theme_minimal() +
  labs(x = "Variables",
       y = "Coefficient")





## refugee

##adding growthrate 
library(dplyr)
library(readxl)
library(writexl)

# Read data
data <- read_xlsx("master_2009_2021_withoutNa4.xlsx")

# Definitions of variable types
special_vars <- c("Conflict")
regular_vars <- c("HDI", "GDPpc", "Urbanization", "Vulnerability", "SPEI", "AgeDependency", "PoliticalStability")
growth_vars <- c("GDPgrowth", "UrbanGrowth")  
dependent_var <- c("refugee")

data <- data %>%
  mutate(across(all_of(special_vars), ~ scale(log(. + 1))))  # log transform +1 then z-score


data <- data %>%
  mutate(across(all_of(regular_vars), scale))  # direct z-score


data <- data %>%
  mutate(across(all_of(dependent_var), ~ scale(log(. + 1))))  # log transform +1 then z-score


all_vars <- c(special_vars, regular_vars, growth_vars)


lagged_vars <- paste0(all_vars, "_lag1")

data <- data %>%
  group_by(iso3) %>%
  mutate(across(all_of(all_vars), ~ c(NA, .[-length(.)]), .names = "{col}_lag1"))


input.df <- data %>%
  select(iso3, year, all_of(lagged_vars), all_of(dependent_var)) %>%
  filter(!is.na(year) & year > 2009)  


write_xlsx(input.df, "input.df.xlsx")





###### Cross-Validation
library(caret)
library(glmnet)
library(dplyr)
library(openxlsx)


input.df<-
  input.df %>% group_by(iso3) %>% 
  dplyr::mutate(L1.refugee=dplyr::lag(refugee,1,default=first(refugee),order_by=year))

myTimeControl <- trainControl(
  method = "repeatedcv",
  number=10, p=.8, classProbs = F, allowParallel = T, savePredictions = F
)

# Elastic Net model parameter grid
alpha <- 0.5  
lambda <- seq(0, 1, 0.01)  

# formula
formula <- as.formula(paste(dependent_var, "~ .", "-year"))

# Train
elastic_model <- train(
  formula,
  data = input.df,
  method = "glmnet",
  trControl = myTimeControl,
  tuneGrid = expand.grid(alpha = alpha, lambda = lambda),
  metric = "RMSE"
)


print(elastic_model)
print(elastic_model$bestTune)
print(min(elastic_model$results$RMSE))


# Calculate R^2
rsq <- postResample(pred = predict(elastic_model, input.df), obs = input.df$refugee)
rsq_stat <- rsq['Rsquared']

print(paste0("R-squared: ", rsq_stat))

elastic_model$bestTune
elastic_model$results[lambda==elastic_model$bestTune$lambda,]



coef_elastic <- coef(elastic_model$finalModel, s = elastic_model$bestTune$lambda)

coef_matrix <- as.matrix(coef_elastic)
coef_df <- data.frame(Coefficient = coef_matrix[, 1], Variable = rownames(coef_matrix))

coef_df <- coef_df[coef_df$Coefficient != 0 & rownames(coef_matrix) != "(Intercept)", ]


print(coef_df)



##Visualization
library(ggplot2)


coef_elastic <- coef(elastic_model$finalModel, s = elastic_model$bestTune$lambda)
coef_matrix <- as.matrix(coef_elastic)
coef_df <- data.frame(Coefficient = coef_matrix[, 1])
coef_df$Variable <- rownames(coef_matrix)


coef_df <- coef_df[coef_df$Coefficient != 0 & coef_df$Variable != "(Intercept)" & coef_df$Variable != "L1.refugee", ]


coef_df <- coef_df[!startsWith(coef_df$Variable, "iso3"), ]
coef_df$Variable <- gsub("_lag1", "", coef_df$Variable)


coef_df$Variable <- gsub("GDPpc", "GDP per Capita", coef_df$Variable)
coef_df$Variable <- gsub("Vulnerability", "Climate Vulnerability", coef_df$Variable)


ggplot(coef_df, aes(x = reorder(Variable, Coefficient), y = Coefficient)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  coord_flip() + # Flip coordinates for horizontal layout
  theme_minimal() +
  labs(x = "Variables",
       y = "Coefficient")





# forced migrant visualization

library(readxl)
library(ggplot2)
library(dplyr)
library(tidyr)
library(scales) # For date formatting

# Load the data from the Excel file
data <- read_excel("master_2009_2021_withoutNa4.xlsx")

# Prepare the data for plotting by reshaping and converting the counts to millions
data_long <- data %>%
  select(year, ID_conflict, ID_disasters) %>%
  mutate(across(c(ID_conflict, ID_disasters), ~ .x / 1e6)) %>%
  pivot_longer(cols = c(ID_conflict, ID_disasters), names_to = "Category", values_to = "Count")

# Visualize the yearly trends of displacement in a stacked bar chart with soft colors
ggplot(data_long, aes(x = factor(year), y = Count, fill = Category)) +
  geom_bar(stat = "identity", position = "stack") +
  scale_fill_brewer(palette = "Pastel1") +  # Use a soft color palette
  labs(x = "Year",
       y = "Count (in millions)",
       fill = "Category",
  ) +
  theme_minimal() +
  scale_x_discrete(breaks = function(x) seq(min(x), max(x), by = 2)) + # 2-year intervals
  theme(plot.title = element_text(hjust = 0.5)) # Center the plot title

# Execute the plot
print(plot)



## heatmap for SPEI
    
    library(readxl)
    library(ggplot2)
    library(dplyr)
    
  
    data <- read_excel("master_2009_2021_withoutNa4.xlsx")
    
    average_spei_data <- data %>%
      group_by(iso3, year) %>%
      summarise(average_SPEI = mean(SPEI, na.rm = TRUE)) %>%
      ungroup()

    heatmap <- ggplot(average_spei_data, aes(x = year, y = iso3, fill = average_SPEI)) +
      geom_tile() + # This adds the colored tiles
      scale_fill_gradient2(low = "red", mid = "white", high = "blue", midpoint = 0, 
                           name = "Average SPEI", 
                           na.value = "grey50") + # Colors for low, mid, high values of SPEI
      scale_x_continuous(breaks = seq(2009, 2021, by = 2)) + # Year intervals of 2
      theme_minimal() + # Minimal theme for a clean look
      labs(x = "Year", 
           y = "iso3") +
      theme(axis.text.x = element_text(angle = 90, vjust = 0.5)) # To rotate x-axis labels for better readability
    
    print(heatmap)
    ggsave("heatmap_small.pdf", plot = heatmap, width = 8, height = plot_height/35, units = "in") 
    
    
    

## Conflict visualization by heatmap
    
    library(readxl)
    library(ggplot2)
    library(dplyr)
    

    data <- read_excel("master_2009_2021_withoutNa4.xlsx")
    

    average_conflict_data <- data %>%
      group_by(iso3, year) %>%
      summarise(average_Conflict_per_capita = mean(Conflict / pop, na.rm = TRUE)) %>%
      ungroup()
    

    conflict_heatmap <- ggplot(average_conflict_data, aes(x = year, y = iso3, fill = average_Conflict_per_capita)) +
      geom_tile() + # This adds the colored tiles
      scale_fill_gradient2(low = "white", mid = "orange", high = "red", midpoint = 0.002, 
                           name = "Average Conflict\nper Capita", # Updated legend title
                           na.value = "grey50") + # Colors for low, mid, high values of Conflict per capita
      scale_x_continuous(breaks = seq(2009, 2021, by = 2)) + # Year intervals of 2
      theme_minimal() + # Minimal theme for a clean look
      labs(x = "Year", y = "ISO3 Code") +
      theme(axis.text.x = element_text(angle = 90, vjust = 0.5), # To rotate x-axis labels for better readability
            axis.text.y = element_text(size = 4)) # Keeps y-axis text size as specified
    

    print(conflict_heatmap)
 
    page_height = 9 
    

    ggsave("heatmap_conflict_per_capita.pdf", plot = conflict_heatmap, width = 8, height = page_height, units = "in")
    
    
    

